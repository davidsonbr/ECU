--@include nabtech/lib/quota.lua.txt
require( "nabtech/lib/core/quota.lua.txt" )

local oldnet = net
if ( not oldnet.oldnet ) then
    net = {
        oldnet = oldnet
    }
end

net.getBytesLeft = oldnet.getBytesLeft

local netQueue = {}

local function netHook()
    for k, v in pairs( netQueue ) do
        if quotaSafe() and ( v.data and #v.data or 0 ) + 6 <= net.getBytesLeft() - 500 --[[ 6 is the number of bytes taken by the UInts, 500 is a safe zone ]] then
            oldnet.start( "net" )
            oldnet.writeUInt( #v.id, 32 )
            oldnet.writeData( v.id, #v.id )

            if v.data then
                oldnet.writeUInt( #v.data, 32 )
                oldnet.writeData( v.data, #v.data )
            else
                oldnet.writeUInt( 0, 32 )
            end

            oldnet.send( v.ply )
            netQueue[ k ] = nil
        else
            break
        end
    end

    if #netQueue == 0 then
        hook.remove( "think", "net_queue" )
    end
end

function net.send( name, data, ply )
    local id = fastlz.compress( name )
    if data then
        local message = von.serialize( data )
        local compressed = fastlz.compress( message )
        data = compressed
    end

    netQueue[ #netQueue + 1 ] = {
        id = id,
        data = data,
        ply = ply
    }

    hook.add( "think", "net_queue", netHook )
end

local callbacks = {}

function net.receive( name, callback )
    callbacks[ fastlz.compress( name ) ] = callback
end

function net.remove( name )
    callbacks[ fastlz.compress( name ) ] = nil
end

hook.add( "net", "net_receive", function( name, len, ply )
    if name == "net" then
        local idLen = oldnet.readUInt( 32 )
        local id = oldnet.readData( idLen )
        local name =  fastlz.decompress( id )

        local dataLen = oldnet.readUInt( 32 )
        local data = {}

        if dataLen ~= 0 then
            data = oldnet.readData( dataLen )
            data = fastlz.decompress( data )
            data = von.deserialize( data )
        end

        if callbacks[ id ] then
            callbacks[ id ]( name, data, ply )
        end
    end
end )
