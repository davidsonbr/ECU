local included = {}

if CLIENT then
	function include ( fileName, callback )
        if not included[ fileName ] then
            if file.exists( fileName ) then
                included[ fileName ] = file.read( fileName )
            else
                error( "Unable to include \"" .. fileName .. "\"" )
            end
        end

        if included[ fileName ] then
            try( function ()
                local ret = loadstring( included[ fileName ] )()
                if callback then
                    callback( ret )
                end
            end, function ( err )
                throw( err, 3, true )
            end )
        end
	end

	local function loadFileForNet ( name, data, ply )
		local fileName = data.file
        local code
		if fileName ~= "" and file.exists( fileName ) then
			 code = file.read( fileName )
		else
			code = "error( \"Unable to include \\\"" .. fileName .. "\\\"\" )"
        end

        net.send( "sv_include " .. fileName, { code = code } )
	end

	net.receive( "cl_include load_file", loadFileForNet )
else
	function include ( fileName, callback )
		if included[ fileName ] then
            if callback then
                callback( included[ fileName ]() )
            else
                included[ fileName ]()
            end
            return
        end
        net.send( "cl_include load_file", { file = fileName }, owner() )

        local function includeNetData ( name, data, ply )
            net.remove( "sv_include " .. fileName )
            included[ fileName ] = loadstring( data.code )

            if callback then
                callback( included[ fileName ]() )
            else
                included[ fileName ]()
            end
        end

        net.receive( "sv_include " .. fileName, includeNetData )
    end
end
