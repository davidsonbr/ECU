DEBUG = 0
DEBUG_SCOPE = "sh"
DEBUG_VERBOSITY = 0

function debugPrint ( lvl, ... )
    local level = { "INFO", "WARN", "ERR" }
    if DEBUG and DEBUG ~= 0 and DEBUG <= lvl then
        if DEBUG_SCOPE == "sh" then
            print( ( SERVER and "SV:" or "CL:" ) .. level[ lvl ], unpack( { ... } ) )
        elseif CLIENT and DEBUG_SCOPE == "cl" then
            print( "CL:" .. level[ lvl ], unpack( { ... } ) )
        elseif SERVER and DEBUG_SCOPE == "sv" then
            print( "SV:" .. level[ lvl ], unpack( { ... } ) )
        end
    end
end

function debugInfo ( ... )
    if DEBUG and DEBUG ~= 0 and DEBUG <= 1 then
        if DEBUG_SCOPE == "sh" then
            print( ( SERVER and "SV:" or "CL:" ) .. "INFO", unpack( { ... } ) )
        elseif CLIENT and DEBUG_SCOPE == "cl" then
            print( "CL:" .. "INFO", unpack( { ... } ) )
        elseif SERVER and DEBUG_SCOPE == "sv" then
            print( "SV:" .. "INFO", unpack( { ... } ) )
        end
    end
end

function debugInfoV ( verbosity, ... )
    if verbosity <= DEBUG_VERBOSITY then
        debugInfo( unpack( { ... } ) )
    end
end

function debugWarn ( ... )
    if DEBUG and DEBUG ~= 0 and DEBUG <= 2 then
        if DEBUG_SCOPE == "sh" then
            print( ( SERVER and "SV:" or "CL:" ) .. "WARN", unpack( { ... } ) )
        elseif CLIENT and DEBUG_SCOPE == "cl" then
            print( "CL:" .. "WARN", unpack( { ... } ) )
        elseif SERVER and DEBUG_SCOPE == "sv" then
            print( "SV:" .. "WARN", unpack( { ... } ) )
        end
    end
end

function debugWarnV ( verbosity, ... )
    if verbosity <= DEBUG_VERBOSITY then
        debugWarn( unpack( { ... } ) )
    end
end

function debugError ( ... )
    if DEBUG and DEBUG ~= 0 and DEBUG <= 3 then
        if DEBUG_SCOPE == "sh" then
            print( ( SERVER and "SV:" or "CL:" ) .. "ERR", unpack( { ... } ) )
        elseif CLIENT and DEBUG_SCOPE == "cl" then
            print( "CL:" .. "ERR", unpack( { ... } ) )
        elseif SERVER and DEBUG_SCOPE == "sv" then
            print( "SV:" .. "ERR", unpack( { ... } ) )
        end
    end
end

function debugErrorV ( verbosity, ... )
    if verbosity <= DEBUG_VERBOSITY then
        debugError( unpack( { ... } ) )
    end
end
