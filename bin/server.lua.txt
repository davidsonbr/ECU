if CLIENT then return end

print( "SERVER" )

local function doIncludes( incs, callback )
    local included = 0
    if #incs == 0 then
        callback()
    else
        local function recursiveInclude()
            include( incs[ included + 1 ], function()
                included = included + 1
                if included == #incs then
                    callback()
                else
                    recursiveInclude()
                end
            end )
        end
        recursiveInclude()
    end
end

function NAB.core.preInit ( ply )
    local includes = {
        NAB.lib .. "search.lua.txt",
    }

    doIncludes( includes, function()
        if not NAB.UID then
            find.add( Vector( -20.626, 0.031, -2.703 ), "models/cheeze/wires/mini_cpu.mdl", "gmod_wire_value", chip(), function( ent )
                if ent:wirelink() then
                    NAB.UID = ent:wirelink()[ "1" ]
                    print( "Found UID chip: " .. NAB.UID )

                    NAB.core.init( ply )
                else
                    print( "Failed to find UID chip" )
                end
            end )
        else
            NAB.core.init( ply )
        end
    end )
end

function NAB.core.init ( ply )
    local includes = {
        NAB.bin .. "sv/chat.lua.txt",
        NAB.bin .. "sv/provider.lua.txt",
        NAB.bin .. "sv/entity.lua.txt",
    }

    doIncludes( includes, function ()
        net.send( "[sv:nab_net] core.preInit", { UID = NAB.UID }, ply )
        --WAIT FOR CLIENT TO BE READY

        net.receive( "[cl:nab_net] core.init", function ( name, data, ply )
            net.remove( "[cl:nab_net] core.init" )

            net.send( "[sv:nab_net] core.init", nil, ply )
            NAB.core.postInit( ply )
        end )

        net.send( "[sv:nab_net] core.init", nil, ply )
    end )
end

function NAB.core.postInit ( ply )
    local includes = {

    }

    doIncludes( includes, function ()
        local chipEnt = NAB.Entity( "chip", chip(), nil )

        net.receive( "[cl:nab_net] core.providerjson", function( name, data, ply )
            NAB.providers = data

            local inc = {}
            for k, v in pairs( NAB.providers ) do
                table.insert( inc, v )
            end

            local included = 0
            local function callback()
                net.send( "[sv:nab_net] core.vehiclejson", nil, ply )
            end

            if #inc == 0 then
                callback()
            else
                local function recursiveInclude()
                    include( NAB.data .. "providers/" .. inc[ included + 1 ] .. "/lua/server/provider.lua.txt", function( provider )
                        provider.type = inc[ included + 1 ]
                        NAB.Provider[ provider.type ] = provider
                        included = included + 1
                        if included == #inc then
                            callback()
                        else
                            recursiveInclude()
                        end
                    end )
                end
                recursiveInclude()
            end
        end )

        net.receive( "[cl:nab_net] core.vehiclejson", function( name, data, ply )
            NAB.vehicle = data

            local function createFromTable( entData, parent )
                for k, v in pairs( entData ) do
                    local ent = find.find( Vector( v.pos[ 1 ], v.pos[ 2 ], v.pos[ 3 ] ), v.model, v.class, parent.ent )

                    local newEnt = NAB.Entity( k, ent, parent )
                    parent.children[ k ] = newEnt
                    net.send( "[sv:nab_net] core.addentity", { name = k, ent = ent, parent = parent:__tostring() }, ply )

                    print( "Created " .. newEnt:__tostring() )
                    --Create providers
                    for _k, _v in pairs( v.providers ) do
                        local providerClass = NAB.Provider[ _v.type ]
                        if providerClass then
                            local provider = NAB.Provider[ _v.type ]( _k, _v.sv or {} )
                            newEnt:addProvider( provider )
                            net.send( "[sv:nab_net] core.addprovider", { ent = newEnt:__tostring(), name = _k, data = _v }, ply )

                            --print( "\tAdded '" .. provider.type .. "' provider" )
                        else
                            --print( "\tFailed to add '" .. _v.type .. "' provider" )
                        end
                    end

                    --Create child entities
                    createFromTable( v.children, newEnt )
                end
            end

            createFromTable( NAB.vehicle, chipEnt )

            NAB.Chat.add( "save", "save files", function()
                local data = chipEnt:toSaveTable()
                net.send( "[sv:nab_net] core.save", data )
            end )

            NAB.Chat.add( "create", "create entity", function( name, parent )
                local trace = owner():getEyeTrace()
                local ent = trace.Entity
                parent = NAB.Entity.entities[ parent ]
                if ent:isValid() and parent then
                    local newEnt = NAB.Entity( name, ent, parent )
                    parent.children[ name ] = newEnt

                    net.send( "[sv:nab_net] core.addentity", { name = name, ent = ent, parent = parent:__tostring() }, ply )
                end
            end )
        end )
    end )
end


