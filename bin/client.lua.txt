if SERVER then return end

print( "CLIENT" )

local function doIncludes( incs, callback )
    local included = 0
    if #incs == 0 then
        callback()
    else
        local function recursiveInclude()
            include( incs[ included + 1 ], function()
                included = included + 1
                if included == #incs then
                    callback()
                else
                    recursiveInclude()
                end
            end )
        end
        recursiveInclude()
    end
end

if player() == owner() then
    function NAB.core.preInit ( name, data )
        local includes = {
            NAB.bin .. "cl/provider.lua.txt",
            NAB.bin .. "cl/entity.lua.txt",
        }

        NAB.UID = data.UID

        doIncludes( includes, function()
            NAB.core.init()
        end )
    end

    function NAB.core.init ()
        local includes = {

        }

        doIncludes( includes, function ()
            net.receive( "[sv:nab_net] core.init", function ( name, data )
                net.remove( "[sv:nab_net] core.init" )

                net.send( "[cl:nab_net] core.init", nil )
                NAB.core.postInit()
            end )

            net.send( "[cl:nab_net] core.init", nil )
        end )
    end

    function NAB.core.postInit ()
        local includes = {

        }

        doIncludes( includes, function ()
            local chipEnt = NAB.Entity( "chip", chip(), nil )

            local fileName = NAB.data .. "vehicles/" .. NAB.UID .. "/providers.json.txt"
            if file.exists( fileName ) then
                NAB.providers = json.decode( file.read( fileName ) )
                net.send( "[cl:nab_net] core.providerjson", NAB.providers )

                for k, v in pairs( NAB.providers ) do
                    include( NAB.data .. "providers/" .. v .. "/lua/client/provider.lua.txt", function( provider )
                        provider.type = v
                        NAB.Provider[ v ] = provider
                    end )
                end
            end

            net.receive( "[sv:nab_net] core.vehiclejson", function( name, data, ply )
                local fileName = NAB.data .. "vehicles/" .. NAB.UID .. "/vehicle.json.txt"
                if file.exists( fileName ) then
                    NAB.vehicle = json.decode( file.read( fileName ) )
                    net.send( "[cl:nab_net] core.vehiclejson", NAB.vehicle )
                end
            end )

            net.receive( "[sv:nab_net] core.addentity", function( name, data, ply )
                local entName = data.name
                local ent = data.ent
                local parent = NAB.Entity.entities[ data.parent ]

                local newEnt = NAB.Entity( entName, ent, parent )
                parent.children[ entName ] = newEnt
            end )

            net.receive( "[sv:nab_net] core.addprovider", function( name, data, ply )
                local entName = data.ent
                local providerName = data.name
                local providerData = data.data

                local ent = NAB.Entity.entities[ entName ]
                local provider = NAB.Provider[ providerData.type ]( providerName, providerData.cl or {} )
                ent:addProvider( provider )
            end )

            net.receive( "[sv:nab_net] core.save", function( name, data, ply )
                local clientData = chipEnt:toSaveTable()
                local tmp = {}

                local function moveTable( client, server )
                    for k, v in pairs( client ) do
                        for _k, _v in pairs( v.providers or {} ) do
                            server[ k ].providers[ _k ].cl = _v.cl or {}
                            tmp[ server[ k ].providers[ _k ].type ] = true
                        end
                        moveTable( v.children, server[ k ].children )
                    end
                end

                moveTable( clientData.children, data.children )

                local providers = {}
                for k, v in pairs( tmp ) do
                    table.insert( providers, k )
                end

                print( "SAVING..." )
                file.write( NAB.data .. "vehicles/" .. NAB.UID .. "/vehicle.json.txt", json.encode( data.children ) )
                file.write( NAB.data .. "vehicles/" .. NAB.UID .. "/providers.json.txt", json.encode( providers ) )
            end )

            net.receive( "[sv:nab_net] core.loadprovider", function( name, data, ply )
                local providerFile = NAB.data .. "providers/" .. data.name .. "/lua/client/provider.lua.txt"
                if file.exists( providerFile ) then
                    include( providerFile, function( provider )
                        provider.type = data.name
                        NAB.Provider[ data.name ] = provider
                        net.send( "[cl:nab_net] core.loadprovider", { name = data.name }, ply )
                    end )
                end
            end )
        end )
    end
end

net.receive( "[sv:nab_net] core.preInit", NAB.core.preInit )
