local P = NAB.Provider.base:extend()

function P:new( name, data )
    self.name = name

    self.chassis = data.chassis or "chip.Chassis"
    self.podcontroller = data.podcontroller or "chip.Control Panel.Pod Controller"
    self.driverseat = data.driverseat or ( self.chassis .. ".Driver Seat" )

    self.accel = false
end

function P:toSaveTable()
    local tab = {
        chassis = self.chassis,
        podcontroller = self.podcontroller,
        driverseat = self.driverseat
    }

    return tab
end

function P:init( ent )
    net.receive( "[cl:nab_provider][transfercase] reverse." .. ent:entIndex(), function( name, data, ply )
        local driverseat = NAB.Entity.entities[ self.driverseat ]
        if driverseat and driverseat.ent:getDriver() == owner() then
            if data.state then
                self.ent:acfShift( 2 )
            else
                self.ent:acfShift( 1 )
            end
        end
    end )

    P.super.init( self, ent )
end

function P:deinit()
    net.remove( "[cl:nab_provider][transfercase] reverse." .. self.ent:entIndex() )

    P.super.deinit( self )
end

P.hook = {

}

return P
